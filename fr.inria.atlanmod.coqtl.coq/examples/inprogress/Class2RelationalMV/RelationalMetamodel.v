
(********************************************************************
	@name Coq declarations for metamodel: <Relational>
	@date 2018/07/30 14:18:26
	@description Automatically generated by Ecore2Coq transformation.
 ********************************************************************)

(* Coq libraries *)
Require Import Bool.
Require Import String.
Require Import List.
Require Import Multiset.
Require Import ListSet.
Require Import Omega.
Require Import Coq.Logic.Eqdep_dec.

(* CoqTL libraries *)
Require Import core.utils.TopUtils.
Require Import core.Metamodel.
Require Import core.Model.


(* Base types *)
Inductive Table : Set :=
  BuildTable :
  (* id *) string ->
  (* name *) string ->
  Table.
  
Inductive Column : Set :=
  BuildColumn :
  (* id *) string ->
  (* name *) string ->
  Column.
  

Inductive TableColumns : Set :=
   BuildTableColumns :
   Table ->
   list Column ->
   TableColumns.

Inductive ColumnReference : Set :=
   BuildColumnReference :
   Column ->
   Table ->
   ColumnReference.


(* Inheritence *)




Inductive RelationalMetamodel_InheritReference : Set :=
.

(* Accessors *)
Definition getTableId (t : Table) : string :=
  match t with BuildTable id name  => id end.
Definition getTableName (t : Table) : string :=
  match t with BuildTable id name  => name end.

Definition setTableId (c : Table) (s : string) : Table :=
  BuildTable s (getTableName c).


Definition getColumnId (c : Column) : string :=
  match c with BuildColumn id name  => id end.
Definition getColumnName (c : Column) : string :=
  match c with BuildColumn id name  => name end.

Definition setColumnId (c : Column) (s : string) : Column :=
  BuildColumn s (getColumnName c).



(* Equality for Types *)
(**? We define eq for Eclass on their fist attribute **)
Definition beq_Table (ta_arg1 : Table) (ta_arg2 : Table) : bool :=
  beq_string (getTableId ta_arg1) (getTableId ta_arg2).

Definition beq_Column (co_arg1 : Column) (co_arg2 : Column) : bool :=
  beq_string (getColumnId co_arg1) (getColumnId co_arg2).

		
(* Meta-types *)
Inductive RelationalMetamodel_EClass : Set :=
  | TableEClass
  | ColumnEClass
.

Definition RelationalMetamodel_getTypeByEClass (reec_arg : RelationalMetamodel_EClass) : Set :=
  match reec_arg with
    | TableEClass => Table
    | ColumnEClass => Column
  end.

(**? confusing name convention **)
Definition RelationalMetamodel_getEAttributeTypesByEClass (reec_arg : RelationalMetamodel_EClass) : Set :=
  match reec_arg with
    | TableEClass => (string * string)
    | ColumnEClass => (string * string)
  end.

Inductive RelationalMetamodel_EReference : Set :=
| TableColumnsEReference
| ColumnReferenceEReference
.

Definition RelationalMetamodel_getTypeByEReference (reer_arg : RelationalMetamodel_EReference) : Set :=
  match reer_arg with
| TableColumnsEReference => TableColumns
| ColumnReferenceEReference => ColumnReference
  end.

(**? confusing name convention **)
Definition RelationalMetamodel_getERoleTypesByEReference (reer_arg : RelationalMetamodel_EReference) : Set :=
  match reer_arg with
| TableColumnsEReference => (Table * list Column)
| ColumnReferenceEReference => (Column * Table)
  end.

(* Generic types *)





(**? Changed Ctr name **)
Inductive RelationalMetamodel_EObject : Set :=
 | Build_RelationalMetamodel_EObject : 
    forall (reec_arg: RelationalMetamodel_EClass), (RelationalMetamodel_getTypeByEClass reec_arg) -> RelationalMetamodel_EObject.

Inductive RelationalMetamodel_ELink : Set :=
 | Build_RelationalMetamodel_ELink : 
    forall (reer_arg:RelationalMetamodel_EReference), (RelationalMetamodel_getTypeByEReference reer_arg) -> RelationalMetamodel_ELink.

(* Reflective functions *)

Lemma RelationalMetamodel_eqEClass_dec : 
 forall (reec_arg1:RelationalMetamodel_EClass) (reec_arg2:RelationalMetamodel_EClass), { reec_arg1 = reec_arg2 } + { reec_arg1 <> reec_arg2 }.
Proof. repeat decide equality. Defined.

Lemma RelationalMetamodel_eqEReference_dec : 
 forall (reer_arg1:RelationalMetamodel_EReference) (reer_arg2:RelationalMetamodel_EReference), { reer_arg1 = reer_arg2 } + { reer_arg1 <> reer_arg2 }.
Proof. repeat decide equality. Defined.

Definition RelationalMetamodel_getEClass (reeo_arg : RelationalMetamodel_EObject) : RelationalMetamodel_EClass :=
   match reeo_arg with
  | (Build_RelationalMetamodel_EObject reeo_arg _) => reeo_arg
   end.

Definition RelationalMetamodel_getObject (cleo_arg : RelationalMetamodel_EObject) : RelationalMetamodel_getTypeByEClass (RelationalMetamodel_getEClass cleo_arg) :=
   match cleo_arg with
  | (Build_RelationalMetamodel_EObject _ b) => b
   end.
  
Definition RelationalMetamodel_getEReference (reel_arg : RelationalMetamodel_ELink) : RelationalMetamodel_EReference :=
   match reel_arg with
  | (Build_RelationalMetamodel_ELink reel_arg _) => reel_arg
   end.

Definition RelationalMetamodel_instanceOfEClass (reec_arg: RelationalMetamodel_EClass) (reeo_arg : RelationalMetamodel_EObject): bool :=
  if RelationalMetamodel_eqEClass_dec (RelationalMetamodel_getEClass reeo_arg) reec_arg then true else false.

Definition RelationalMetamodel_instanceOfEReference (reer_arg: RelationalMetamodel_EReference) (reel_arg : RelationalMetamodel_ELink): bool :=
  if RelationalMetamodel_eqEReference_dec (RelationalMetamodel_getEReference reel_arg) reer_arg then true else false.

(** Helper of building EObject for model **)
Definition RelationalMetamodel_getEObjectFromEAttributeValues (reec_arg : RelationalMetamodel_EClass) : (RelationalMetamodel_getEAttributeTypesByEClass reec_arg) -> RelationalMetamodel_EObject :=
  match reec_arg with
    | TableEClass => (fun (p: (string * string)) => (Build_RelationalMetamodel_EObject TableEClass (BuildTable (fst p) (snd p))))
    | ColumnEClass => (fun (p: (string * string)) => (Build_RelationalMetamodel_EObject ColumnEClass (BuildColumn (fst p) (snd p))))
  end.

(** Helper of building ELink for model **)
Definition RelationalMetamodel_getELinkFromERoleValues (reer_arg : RelationalMetamodel_EReference) : (RelationalMetamodel_getERoleTypesByEReference reer_arg) -> RelationalMetamodel_ELink :=
  match reer_arg with
| TableColumnsEReference => (fun (p: (Table * list Column)) => (Build_RelationalMetamodel_ELink TableColumnsEReference (BuildTableColumns (fst p) (snd p))))
| ColumnReferenceEReference => (fun (p: (Column * Table)) => (Build_RelationalMetamodel_ELink ColumnReferenceEReference (BuildColumnReference (fst p) (snd p))))
  end.

Definition RelationalMetamodel_toEClass (reec_arg : RelationalMetamodel_EClass) (reeo_arg : RelationalMetamodel_EObject) : option (RelationalMetamodel_getTypeByEClass reec_arg).
Proof.
  destruct reeo_arg as [arg1 arg2].
  destruct (RelationalMetamodel_eqEClass_dec arg1 reec_arg) as [e|] eqn:dec_case.
  - rewrite e in arg2.
    exact (Some arg2).
  - exact None.
Defined.

Definition RelationalMetamodel_toEReference (reer_arg : RelationalMetamodel_EReference) (reel_arg : RelationalMetamodel_ELink) : option (RelationalMetamodel_getTypeByEReference reer_arg).
Proof.
  destruct reel_arg as [arg1 arg2].
  destruct (RelationalMetamodel_eqEReference_dec arg1 reer_arg) as [e|] eqn:dec_case.
  - rewrite e in arg2.
  	exact (Some arg2).
  - exact None.
Defined.

(* Generic functions *)
Definition RelationalMetamodel_toEObjectFromTable (ta_arg :Table) : RelationalMetamodel_EObject :=
  (Build_RelationalMetamodel_EObject TableEClass ta_arg).
Coercion RelationalMetamodel_toEObjectFromTable : Table >-> RelationalMetamodel_EObject.

Definition RelationalMetamodel_toEObjectFromColumn (co_arg :Column) : RelationalMetamodel_EObject :=
  (Build_RelationalMetamodel_EObject ColumnEClass co_arg).
Coercion RelationalMetamodel_toEObjectFromColumn : Column >-> RelationalMetamodel_EObject.


(**? what are these for **)
Definition RelationalMetamodel_toEObject (reeo_arg : RelationalMetamodel_EObject) : RelationalMetamodel_EObject := reeo_arg.
Definition RelationalMetamodel_toELink (reel_arg : RelationalMetamodel_ELink) : RelationalMetamodel_ELink := reel_arg.
Definition RelationalModel := Model RelationalMetamodel_EObject RelationalMetamodel_ELink.

Definition RelationalMetamodel_toEObjectOfEClass (reec_arg: RelationalMetamodel_EClass) (t: RelationalMetamodel_getTypeByEClass reec_arg) : RelationalMetamodel_EObject :=
  (Build_RelationalMetamodel_EObject reec_arg t).

Definition RelationalMetamodel_toELinkOfEReference (reer_arg: RelationalMetamodel_EReference) (t: RelationalMetamodel_getTypeByEReference reer_arg) : RelationalMetamodel_ELink :=
		  (Build_RelationalMetamodel_ELink reer_arg t).

Definition RelationalMetamodel_getId (a : RelationalMetamodel_EObject) : string.
Proof.
  destruct a.
  destruct reec_arg.
  * simpl in r. exact (getTableId r).
  * simpl in r. exact (getColumnId r).
Defined.

Definition RelationalMetamodel_setId (a : RelationalMetamodel_EObject) (s: string) : RelationalMetamodel_EObject.
Proof.
  destruct a.
  destruct reec_arg.
  * simpl in r. exact (setTableId r s).
  * simpl in r. exact (setColumnId r s).
Defined.

Fixpoint RelationalMetamodel_getTableColumnsOnLinks (ta_arg : Table) (l : list RelationalMetamodel_ELink) : option (list Column) :=
match l with
| (Build_RelationalMetamodel_ELink TableColumnsEReference (BuildTableColumns Table_ctr columns_ctr)) :: l' => 
	  if beq_Table Table_ctr ta_arg then Some columns_ctr else RelationalMetamodel_getTableColumnsOnLinks ta_arg l'
| _ :: l' => RelationalMetamodel_getTableColumnsOnLinks ta_arg l'
| nil => None
end.

Definition getTableColumns (ta_arg : Table) (m : RelationalModel) : option (list Column) :=
  RelationalMetamodel_getTableColumnsOnLinks ta_arg (@allModelLinks _ _ m).

Fixpoint RelationalMetamodel_getColumnReferenceOnLinks (co_arg : Column) (l : list RelationalMetamodel_ELink) : option (Table) :=
match l with
| (Build_RelationalMetamodel_ELink ColumnReferenceEReference (BuildColumnReference Column_ctr reference_ctr)) :: l' => 
	  if beq_Column Column_ctr co_arg then Some reference_ctr else RelationalMetamodel_getColumnReferenceOnLinks co_arg l'
| _ :: l' => RelationalMetamodel_getColumnReferenceOnLinks co_arg l'
| nil => None
end.

Definition getColumnReference (co_arg : Column) (m : RelationalModel) : option (Table) :=
  RelationalMetamodel_getColumnReferenceOnLinks co_arg (@allModelLinks _ _ m).


Definition RelationalMetamodel_defaultInstanceOfEClass (reec_arg: RelationalMetamodel_EClass) : (RelationalMetamodel_getTypeByEClass reec_arg) :=
  match reec_arg with
  | TableEClass => (BuildTable "" "")
  | ColumnEClass => (BuildColumn "" "")
  end.

(* Typeclass Instance *)
Instance RelationalMetamodel : Metamodel RelationalMetamodel_EObject RelationalMetamodel_ELink RelationalMetamodel_EClass RelationalMetamodel_EReference :=
  {
    denoteModelClass := RelationalMetamodel_getTypeByEClass;
    denoteModelReference := RelationalMetamodel_getTypeByEReference;
    toModelClass := RelationalMetamodel_toEClass;
    toModelReference := RelationalMetamodel_toEReference;
    toModelElement := RelationalMetamodel_toEObjectOfEClass;
    toModelLink := RelationalMetamodel_toELinkOfEReference;
    bottomModelClass := RelationalMetamodel_defaultInstanceOfEClass;

    (* Theorems *)
    eqModelClass_dec := RelationalMetamodel_eqEClass_dec;
    eqModelReference_dec := RelationalMetamodel_eqEReference_dec;

    (* Constructors *)
    BuildModelElement := Build_RelationalMetamodel_EObject;
    BuildModelLink := Build_RelationalMetamodel_ELink;

  }.
  
(* Useful lemmas *)
Lemma Relational_invert : 
  forall (reec_arg: RelationalMetamodel_EClass) (t1 t2: RelationalMetamodel_getTypeByEClass reec_arg), Build_RelationalMetamodel_EObject reec_arg t1 = Build_RelationalMetamodel_EObject reec_arg t2 -> t1 = t2.
Proof.
  intros.
  inversion H.
  apply inj_pair2_eq_dec in H1.
  exact H1.
  apply RelationalMetamodel_eqEClass_dec.
Qed.

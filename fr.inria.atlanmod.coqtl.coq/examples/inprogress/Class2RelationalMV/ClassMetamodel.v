
(********************************************************************
	@name Coq declarations for metamodel: <Class>
	@date 2018/07/30 14:21:48
	@description Automatically generated by Ecore2Coq transformation.
 ********************************************************************)

(* Coq libraries *)
Require Import Bool.
Require Import String.
Require Import List.
Require Import Multiset.
Require Import ListSet.
Require Import Omega.
Require Import Coq.Logic.Eqdep_dec.

(* CoqTL libraries *)
Require Import core.utils.TopUtils.
Require Import core.Metamodel.
Require Import core.Model.


(* Base types *)
Inductive Class : Set :=
  BuildClass :
  (* id *) string ->
  (* name *) string ->
  Class.
  
Inductive Attribute : Set :=
  BuildAttribute :
  (* id *) string ->
  (* multiValued *) bool ->
  (* name *) string ->
  Attribute.
  

Inductive ClassAttributes : Set :=
   BuildClassAttributes :
   Class ->
   list Attribute ->
   ClassAttributes.

Inductive AttributeType : Set :=
   BuildAttributeType :
   Attribute ->
   Class ->
   AttributeType.


(* Inheritence *)




Inductive ClassMetamodel_InheritReference : Set :=
.

(* Accessors *)
Definition getClassId (c : Class) : string :=
  match c with BuildClass id name  => id end.
Definition getClassName (c : Class) : string :=
  match c with BuildClass id name  => name end.

Definition setClassId (c : Class) (s : string) : Class :=
  BuildClass s (getClassName c).


 
Definition getAttributeId (a : Attribute) : string :=
  match a with BuildAttribute id multiValued name  => id end.
Definition getAttributeMultiValued (a : Attribute) : bool :=
  match a with BuildAttribute id multiValued name  => multiValued end.
Definition getAttributeName (a : Attribute) : string :=
  match a with BuildAttribute id multiValued name  => name end.

Definition setAttributeId (a : Attribute) (s : string) : Attribute :=
  BuildAttribute s (getAttributeMultiValued a) (getAttributeName a).



(* Equality for Types *)
(**? We define eq for Eclass on their fist attribute **)
Definition beq_Class (cl_arg1 : Class) (cl_arg2 : Class) : bool :=
  beq_string (getClassId cl_arg1) (getClassId cl_arg2).

Definition beq_Attribute (at_arg1 : Attribute) (at_arg2 : Attribute) : bool :=
  beq_string (getAttributeId at_arg1) (getAttributeId at_arg2).

		
(* Meta-types *)
Inductive ClassMetamodel_EClass : Set :=
  | ClassEClass
  | AttributeEClass
.

Definition ClassMetamodel_getTypeByEClass (clec_arg : ClassMetamodel_EClass) : Set :=
  match clec_arg with
    | ClassEClass => Class
    | AttributeEClass => Attribute
  end.

(**? confusing name convention **)
Definition ClassMetamodel_getEAttributeTypesByEClass (clec_arg : ClassMetamodel_EClass) : Set :=
  match clec_arg with
    | ClassEClass => (string * string)
    | AttributeEClass => (string * bool * string)
  end.

Inductive ClassMetamodel_EReference : Set :=
| ClassAttributesEReference
| AttributeTypeEReference
.

Definition ClassMetamodel_getTypeByEReference (cler_arg : ClassMetamodel_EReference) : Set :=
  match cler_arg with
| ClassAttributesEReference => ClassAttributes
| AttributeTypeEReference => AttributeType
  end.

(**? confusing name convention **)
Definition ClassMetamodel_getERoleTypesByEReference (cler_arg : ClassMetamodel_EReference) : Set :=
  match cler_arg with
| ClassAttributesEReference => (Class * list Attribute)
| AttributeTypeEReference => (Attribute * Class)
  end.

(* Generic types *)





(**? Changed Ctr name **)
Inductive ClassMetamodel_EObject : Set :=
 | Build_ClassMetamodel_EObject : 
    forall (clec_arg: ClassMetamodel_EClass), (ClassMetamodel_getTypeByEClass clec_arg) -> ClassMetamodel_EObject.

Inductive ClassMetamodel_ELink : Set :=
 | Build_ClassMetamodel_ELink : 
    forall (cler_arg:ClassMetamodel_EReference), (ClassMetamodel_getTypeByEReference cler_arg) -> ClassMetamodel_ELink.

(* Reflective functions *)

Lemma ClassMetamodel_eqEClass_dec : 
 forall (clec_arg1:ClassMetamodel_EClass) (clec_arg2:ClassMetamodel_EClass), { clec_arg1 = clec_arg2 } + { clec_arg1 <> clec_arg2 }.
Proof. repeat decide equality. Defined.

Lemma ClassMetamodel_eqEReference_dec : 
 forall (cler_arg1:ClassMetamodel_EReference) (cler_arg2:ClassMetamodel_EReference), { cler_arg1 = cler_arg2 } + { cler_arg1 <> cler_arg2 }.
Proof. repeat decide equality. Defined.

Definition ClassMetamodel_getEClass (cleo_arg : ClassMetamodel_EObject) : ClassMetamodel_EClass :=
   match cleo_arg with
  | (Build_ClassMetamodel_EObject cleo_arg _) => cleo_arg
   end.

Definition ClassMetamodel_getObject (cleo_arg : ClassMetamodel_EObject) : ClassMetamodel_getTypeByEClass (ClassMetamodel_getEClass cleo_arg) :=
   match cleo_arg with
  | (Build_ClassMetamodel_EObject _ b) => b
   end.
  
Definition ClassMetamodel_getEReference (clel_arg : ClassMetamodel_ELink) : ClassMetamodel_EReference :=
   match clel_arg with
  | (Build_ClassMetamodel_ELink clel_arg _) => clel_arg
   end.

Definition ClassMetamodel_instanceOfEClass (clec_arg: ClassMetamodel_EClass) (cleo_arg : ClassMetamodel_EObject): bool :=
  if ClassMetamodel_eqEClass_dec (ClassMetamodel_getEClass cleo_arg) clec_arg then true else false.

Definition ClassMetamodel_instanceOfEReference (cler_arg: ClassMetamodel_EReference) (clel_arg : ClassMetamodel_ELink): bool :=
  if ClassMetamodel_eqEReference_dec (ClassMetamodel_getEReference clel_arg) cler_arg then true else false.

(** Helper of building EObject for model **)
Definition ClassMetamodel_getEObjectFromEAttributeValues (clec_arg : ClassMetamodel_EClass) : (ClassMetamodel_getEAttributeTypesByEClass clec_arg) -> ClassMetamodel_EObject :=
  match clec_arg with
    | ClassEClass => (fun (p: (string * string)) => (Build_ClassMetamodel_EObject ClassEClass (BuildClass (fst p) (snd p))))
    | AttributeEClass => (fun (p: (string * bool * string)) => (Build_ClassMetamodel_EObject AttributeEClass (BuildAttribute (fst (fst p)) (snd (fst p)) (snd p))))
  end.

(** Helper of building ELink for model **)
Definition ClassMetamodel_getELinkFromERoleValues (cler_arg : ClassMetamodel_EReference) : (ClassMetamodel_getERoleTypesByEReference cler_arg) -> ClassMetamodel_ELink :=
  match cler_arg with
| ClassAttributesEReference => (fun (p: (Class * list Attribute)) => (Build_ClassMetamodel_ELink ClassAttributesEReference (BuildClassAttributes (fst p) (snd p))))
| AttributeTypeEReference => (fun (p: (Attribute * Class)) => (Build_ClassMetamodel_ELink AttributeTypeEReference (BuildAttributeType (fst p) (snd p))))
  end.

Definition ClassMetamodel_toEClass (clec_arg : ClassMetamodel_EClass) (cleo_arg : ClassMetamodel_EObject) : option (ClassMetamodel_getTypeByEClass clec_arg).
Proof.
  destruct cleo_arg as [arg1 arg2].
  destruct (ClassMetamodel_eqEClass_dec arg1 clec_arg) as [e|] eqn:dec_case.
  - rewrite e in arg2.
    exact (Some arg2).
  - exact None.
Defined.

Definition ClassMetamodel_toEReference (cler_arg : ClassMetamodel_EReference) (clel_arg : ClassMetamodel_ELink) : option (ClassMetamodel_getTypeByEReference cler_arg).
Proof.
  destruct clel_arg as [arg1 arg2].
  destruct (ClassMetamodel_eqEReference_dec arg1 cler_arg) as [e|] eqn:dec_case.
  - rewrite e in arg2.
  	exact (Some arg2).
  - exact None.
Defined.

(* Generic functions *)
Definition ClassMetamodel_toEObjectFromClass (cl_arg :Class) : ClassMetamodel_EObject :=
  (Build_ClassMetamodel_EObject ClassEClass cl_arg).
Coercion ClassMetamodel_toEObjectFromClass : Class >-> ClassMetamodel_EObject.

Definition ClassMetamodel_toEObjectFromAttribute (at_arg :Attribute) : ClassMetamodel_EObject :=
  (Build_ClassMetamodel_EObject AttributeEClass at_arg).
Coercion ClassMetamodel_toEObjectFromAttribute : Attribute >-> ClassMetamodel_EObject.


(**? what are these for **)
Definition ClassMetamodel_toEObject (cleo_arg : ClassMetamodel_EObject) : ClassMetamodel_EObject := cleo_arg.
Definition ClassMetamodel_toELink (clel_arg : ClassMetamodel_ELink) : ClassMetamodel_ELink := clel_arg.
Definition ClassModel := Model ClassMetamodel_EObject ClassMetamodel_ELink.

Definition ClassMetamodel_toEObjectOfEClass (clec_arg: ClassMetamodel_EClass) (t: ClassMetamodel_getTypeByEClass clec_arg) : ClassMetamodel_EObject :=
  (Build_ClassMetamodel_EObject clec_arg t).

Definition ClassMetamodel_toELinkOfEReference (cler_arg: ClassMetamodel_EReference) (t: ClassMetamodel_getTypeByEReference cler_arg) : ClassMetamodel_ELink :=
		  (Build_ClassMetamodel_ELink cler_arg t).

Definition ClassMetamodel_getId (a : ClassMetamodel_EObject) : string.
Proof.
  destruct a.
  destruct clec_arg.
  * simpl in c. exact (getClassId c).
  * simpl in c. exact (getAttributeId c).
Defined.

Definition ClassMetamodel_setId (a : ClassMetamodel_EObject) (s: string) : ClassMetamodel_EObject.
Proof.
  destruct a.
  destruct clec_arg.
  * simpl in c. exact (setClassId c s).
  * simpl in c. exact (setAttributeId c s).
Defined.

Fixpoint ClassMetamodel_getClassAttributesOnLinks (cl_arg : Class) (l : list ClassMetamodel_ELink) : option (list Attribute) :=
match l with
| (Build_ClassMetamodel_ELink ClassAttributesEReference (BuildClassAttributes Class_ctr attributes_ctr)) :: l' => 
	  if beq_Class Class_ctr cl_arg then Some attributes_ctr else ClassMetamodel_getClassAttributesOnLinks cl_arg l'
| _ :: l' => ClassMetamodel_getClassAttributesOnLinks cl_arg l'
| nil => None
end.

Definition getClassAttributes (cl_arg : Class) (m : ClassModel) : option (list Attribute) :=
  ClassMetamodel_getClassAttributesOnLinks cl_arg (@allModelLinks _ _ m).

Fixpoint ClassMetamodel_getAttributeTypeOnLinks (at_arg : Attribute) (l : list ClassMetamodel_ELink) : option (Class) :=
match l with
| (Build_ClassMetamodel_ELink AttributeTypeEReference (BuildAttributeType Attribute_ctr type_ctr)) :: l' => 
	  if beq_Attribute Attribute_ctr at_arg then Some type_ctr else ClassMetamodel_getAttributeTypeOnLinks at_arg l'
| _ :: l' => ClassMetamodel_getAttributeTypeOnLinks at_arg l'
| nil => None
end.

Definition getAttributeType (at_arg : Attribute) (m : ClassModel) : option (Class) :=
  ClassMetamodel_getAttributeTypeOnLinks at_arg (@allModelLinks _ _ m).


Definition ClassMetamodel_defaultInstanceOfEClass (clec_arg: ClassMetamodel_EClass) : (ClassMetamodel_getTypeByEClass clec_arg) :=
  match clec_arg with
  | ClassEClass => (BuildClass "" "")
  | AttributeEClass => (BuildAttribute "" true "")
  end.

(* Typeclass Instance *)
Instance ClassMetamodel : Metamodel ClassMetamodel_EObject ClassMetamodel_ELink ClassMetamodel_EClass ClassMetamodel_EReference :=
  {
    denoteModelClass := ClassMetamodel_getTypeByEClass;
    denoteModelReference := ClassMetamodel_getTypeByEReference;
    toModelClass := ClassMetamodel_toEClass;
    toModelReference := ClassMetamodel_toEReference;
    toModelElement := ClassMetamodel_toEObjectOfEClass;
    toModelLink := ClassMetamodel_toELinkOfEReference;
    bottomModelClass := ClassMetamodel_defaultInstanceOfEClass;

    (* Theorems *)
    eqModelClass_dec := ClassMetamodel_eqEClass_dec;
    eqModelReference_dec := ClassMetamodel_eqEReference_dec;

    (* Constructors *)
    BuildModelElement := Build_ClassMetamodel_EObject;
    BuildModelLink := Build_ClassMetamodel_ELink;

  }.
  
(* Useful lemmas *)
Lemma Class_invert : 
  forall (clec_arg: ClassMetamodel_EClass) (t1 t2: ClassMetamodel_getTypeByEClass clec_arg), Build_ClassMetamodel_EObject clec_arg t1 = Build_ClassMetamodel_EObject clec_arg t2 -> t1 = t2.
Proof.
  intros.
  inversion H.
  apply inj_pair2_eq_dec in H1.
  exact H1.
  apply ClassMetamodel_eqEClass_dec.
Qed.
